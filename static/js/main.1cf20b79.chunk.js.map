{"version":3,"sources":["Storage/exchange.ts","Utils/wrapIDBRequest.ts","Storage/openDatabase.ts","Storage/openObjectStore.ts","Storage/fetchModels.ts","Slices/selectedModels.ts","Hooks/useImage.tsx","Storage/fetchImage.ts","Components/Badge.tsx","Components/Badges.tsx","Components/Card.tsx","Collection/Item-noimage.svg","Collection/Item.tsx","Collection/List.tsx","Hooks/useCollection.tsx","Storage/deleteModel.ts","Collection/Toolbar/Actions.tsx","Collection/Toolbar/SelectionControls.tsx","Storage/storeModel.ts","Storage/storeModels.ts","Collection/Toolbar/StateControls.tsx","Collection/Toolbar.tsx","Collection.tsx","AddModels/modelsSlice.ts","Store/index.ts","Storage/fetchCatalogue.ts","Catalogue/Item.tsx","Catalogue/List.tsx","Catalogue.tsx","Frame/Header/Link.tsx","Frame/Header.tsx","Frame/SnackNotification.tsx","Hooks/useStorageManager.tsx","Frame.tsx","Components/Field.tsx","Components/HeaderInput.tsx","Hooks/useModel.tsx","Storage/fetchModel.ts","Model/Controls.tsx","Model.tsx","Storage/storeImage.ts","AddModels/ModelDefinition.tsx","Hooks/useBox.tsx","Storage/fetchBox().ts","AddModels.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["listeners","Map","listen","objectStore","callback","storeListeners","get","Set","add","set","delete","wrapIDBRequest","request","Promise","resolve","reject","addEventListener","setupModels","database","models","createObjectStore","keyPath","createIndex","unique","transaction","oncomplete","onerror","setupImages","images","openObjectStore","name","mode","indexedDB","open","onsuccess","event","target","result","onupgradeneeded","console","log","objectStoreNames","stores","contains","then","emit","fetchModels","getAll","selectedModelsSlice","createSlice","initialState","reducers","clear","state","payload","filtered","Array","isArray","filter","m","findIndex","n","id","remove","value","actions","selectSelected","selectedModels","useImage","source","useState","undefined","image","setImage","useEffect","isMounted","window","URL","createObjectURL","fetchImage","url","Badge","props","className","style","backgroundColor","color","text","Badges","badges","map","badgeProps","idx","Card","selectable","cardCSS","push","join","src","alt","type","onChange","checked","onSelectChange","selected","to","title","children","Item","useSelector","dispatch","useDispatch","model","find","NoImage","List","collection","setCollection","sort","a","b","localeCompare","cancelListener","useCollection","deleteModel","Actions","disabled","length","onClick","forEach","SelectionControls","storeModel","put","storeModels","all","StateControls","updateModels","Object","assign","ModelState","Unknown","Packaged","Assembled","Primed","Painted","Done","Broken","Toolbar","Collection","addModelsSlice","input","insert","action","copied","index","v","addModels","store","configureStore","reducer","combineReducers","selectedModelsReducer","addModelsReducer","fetch","spaceMarinesPromise","data","default","buildBox","fetchCatalogue","box","availability","catalogue","setCatalogue","Catalogue","Link","resolved","useResolvedPath","css","useMatch","path","pathname","end","Header","SnackNotification","persisted","setPersisted","navigator","storage","persist","useStorageManager","Frame","Field","label","HeaderInput","useModel","initial","setModel","fetchModel","removeModel","Error","Controls","Model","useParams","formRef","useRef","onStore","useCallback","preventDefault","current","formData","FormData","newModel","notes","size","storeImage","ref","onSubmit","defaultValue","accept","ModelDefinition","possibilities","setSelected","p","useBox","setBox","boxes","fetchBox","AddModels","navigate","useNavigate","e","buildModel","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cf20b79.chunk.js","sourcesContent":["/**\r\n *  This file provides an exchange that our database actions can use\r\n *  to notify about changes to the database. This notification can\r\n *  be listen to with listen() function and functions that are\r\n *  aware about the changes can use emit() function to post\r\n *  information which object store changed.\r\n * \r\n *  @todo would be nice to know more specifics about the change\r\n *  @todo use BroadcastChannel for cross-tab changes and\r\n *  cross-worker changes.\r\n */\r\n\r\nconst listeners:Map<string, Set<() => void>> = new Map();\r\n\r\n/**\r\n *  Listen to changes of a specific object store.\r\n */\r\nexport function listen(objectStore:string, callback:() => void) : () => void {\r\n\r\n    const storeListeners = listeners.get(objectStore) || new Set();\r\n    storeListeners.add(callback);\r\n\r\n    listeners.set(objectStore, storeListeners);\r\n\r\n    return () => void storeListeners.delete(callback);\r\n};\r\n\r\n/**\r\n *  Tell that a specific object store changed.\r\n */\r\nexport function emit(objectStore:string) : void {\r\n\r\n    const storeListeners = listeners.get(objectStore);\r\n\r\n    if (!storeListeners) return;\r\n\r\n    for (let callback of storeListeners) callback();\r\n};","/**\r\n *  An utility to wrap an IndexedDB request in a promise\r\n *  which is easier to work with.\r\n */\r\nexport default function wrapIDBRequest(request:IDBRequest) : Promise<IDBRequest> {\r\n\r\n    return new Promise((resolve:(request:IDBRequest) => void, reject: () => void) => {\r\n\r\n        request.addEventListener('success', () => void resolve(request));\r\n        request.addEventListener('error', () => void reject());\r\n    });\r\n};","/**\r\n *  A utility function to open a database and expose that object. This function\r\n *  also automatically sets up the database and makes sure that everything is in\r\n *  working order.\r\n */\r\nexport default function openDatabase() : Promise<IDBDatabase> {\r\n\r\n    return new Promise((resolve:(database:IDBDatabase) => void, reject:() => void) => {\r\n\r\n        const request = indexedDB.open('collection', 2);\r\n        \r\n        request.onsuccess = function(event:any) { resolve(event.target.result); }\r\n        request.onerror = function() { reject(); }\r\n\r\n        request.onupgradeneeded = function(event:any) {\r\n\r\n            console.log('onupgrade');\r\n\r\n            const database = event.target.result as IDBDatabase;\r\n\r\n            if (!('models' in database.objectStoreNames)) setupModels(database);\r\n            if (!('images' in database.objectStoreNames)) setupImages(database);\r\n            \r\n            const stores = database.objectStoreNames;\r\n\r\n            if (!stores.contains('models')) setupModels(database);\r\n            if (!stores.contains('images')) setupImages(database);\r\n        };\r\n    });\r\n};\r\n\r\n/**\r\n *  A helper function to setup the models collection.\r\n */\r\nfunction setupModels(database:IDBDatabase) : Promise<void> {\r\n\r\n    return new Promise((resolve:() => void, reject:() => void) => {\r\n        \r\n        const models = database.createObjectStore('models', { keyPath: 'id' });\r\n\r\n        models.createIndex('id', 'id', { unique: true });\r\n\r\n        models.transaction.oncomplete = () => resolve();\r\n        models.transaction.onerror = () => reject();\r\n    });\r\n};\r\n\r\nfunction setupImages(database:IDBDatabase) : Promise<void> {\r\n\r\n    return new Promise((resolve:() => void, reject:() => void) => {\r\n\r\n        const images = database.createObjectStore('images');\r\n\r\n        images.createIndex('id', 'id', { unique: true });\r\n\r\n        images.transaction.oncomplete = resolve;\r\n        images.transaction.onerror = reject;\r\n    });\r\n};\r\n","import openDatabase from \"./openDatabase\";\r\nimport { emit } from './exchange';\r\n\r\n/**\r\n *  This is a function to open a specific object store inside our IndexedDB.\r\n */\r\nexport default function openObjectStore(name:string, mode:'readwrite'|'readonly') : Promise<IDBObjectStore> {\r\n\r\n    return openDatabase().then((database:IDBDatabase) => {\r\n\r\n        const transaction = database.transaction([ name ], mode);\r\n        const objectStore = transaction.objectStore(name);\r\n\r\n        if (mode === 'readonly') return objectStore;\r\n\r\n        /**\r\n         *  @note This is a very naive implementation of listeninig\r\n         *  to when a transaction that COULD change somethng finishes.\r\n         *  Instead we should check somehow if the transaction changed\r\n         *  something in the object store.\r\n         */\r\n        transaction.addEventListener('complete', () => void emit(name));\r\n\r\n        return objectStore;\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n\r\nexport default function fetchModels() : Promise<Array<Model>> {\r\n\r\n    return openObjectStore('models', 'readonly').then((objectStore:IDBObjectStore) => { \r\n\r\n        const request = objectStore.getAll();\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => request.result);\r\n    });\r\n};","import { createSlice, CaseReducer, PayloadAction, SliceCaseReducers } from '@reduxjs/toolkit';\r\nimport { Model } from 'cogi-collectibles';\r\nimport { RootState } from '../Store';\r\n\r\ntype ClearReducer = CaseReducer<Array<Model>>;\r\nconst clearReducer:ClearReducer = (state:Array<Model>) => [];\r\n\r\ntype AddReducer = CaseReducer<Array<Model>, PayloadAction<Model|Array<Model>>>;\r\nconst addReducer:AddReducer = (state:Array<Model>, payload:PayloadAction<Model|Array<Model>>) : Array<Model> => {\r\n\r\n    const input = Array.isArray(payload.payload) ?  payload.payload : [ payload.payload ];\r\n\r\n    const filtered = input.filter((m:Model) => state.findIndex((n:Model) => m.id === n.id) === -1);\r\n\r\n    return [ ...state, ...filtered ];\r\n};\r\n\r\ntype RemoveReducer = CaseReducer<Array<Model>, PayloadAction<Model>>;\r\nconst removeReducer:RemoveReducer = (state:Array<Model>, payload:PayloadAction<Model>) => {\r\n\r\n    return state.filter((value:Model) => value.id !== payload.payload.id);\r\n};\r\n\r\nconst selectedModelsSlice = createSlice<Model[], SliceCaseReducers<Model[]>>({\r\n    name: 'selectedModels',\r\n    initialState: [],\r\n    reducers: {\r\n        clear: clearReducer,\r\n        add: addReducer,\r\n        remove: removeReducer\r\n    }\r\n});\r\n\r\nexport const { clear, add, remove } = selectedModelsSlice.actions;\r\nexport const selectSelected = (state:RootState) => state.selectedModels;\r\nexport default selectedModelsSlice.reducer;","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchImage from \"../Storage/fetchImage\";\r\n\r\n/**\r\n *  A custom hook to load a specific image.\r\n */\r\nexport default function useImage(source:Model) {\r\n\r\n    const [ image, setImage ] = useState<string|null|undefined>(undefined);\r\n\r\n    const id = source.id;\r\n    \r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (image === undefined) fetchImage(id).then((url:string|null) => { isMounted && setImage(url); });\r\n\r\n        return () => { isMounted = false; }\r\n\r\n    }, [ image, setImage, id ]);\r\n\r\n    return {\r\n        image\r\n    };\r\n};","import wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function fetchImage(id:string) : Promise<string|null> {\r\n\r\n    return openObjectStore('images', 'readonly').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.get(id);\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => {\r\n\r\n            if (!request.result) return null;\r\n\r\n            const url = window.URL.createObjectURL(request.result);\r\n\r\n            return url;\r\n        });\r\n    });\r\n};","import './Badge.css';\r\nexport interface BadgeProps {\r\n\r\n    /**\r\n     *  The actual text in the badge.\r\n     */\r\n    text:string;\r\n\r\n    /**\r\n     *  The color of the badge.\r\n     */\r\n    color:string;\r\n};\r\n/**\r\n *  A badge component.\r\n */\r\nexport default function Badge(props:BadgeProps) {\r\n\r\n    return (\r\n        <span className=\"badge\" style={{ backgroundColor: props.color }}>{props.text}</span>\r\n    );\r\n};","import Badge, { BadgeProps } from \"./Badge\";\r\nimport './Badges.css';\r\nexport interface BadgesProps {\r\n\r\n    /**\r\n     *  The list of badges to display.\r\n     */\r\n    badges:Array<BadgeProps>;\r\n};\r\n\r\n/**\r\n *  A component that helps showing a list of badges.\r\n */\r\nexport default function Badges(props:BadgesProps) {\r\n\r\n    return (\r\n        <div className=\"badges\">\r\n            {props.badges.map((badgeProps:BadgeProps, idx:number) => {\r\n            \r\n                return (<Badge key={idx} {...badgeProps}/>);\r\n            })}\r\n        </div>\r\n    );\r\n};","import { ReactNode } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BadgeProps } from \"./Badge\";\r\nimport Badges from \"./Badges\";\r\nimport './Card.css';\r\n\r\nexport interface CardProps {\r\n\r\n    /**\r\n     *  The title of the card.\r\n     */\r\n    title:string;\r\n\r\n    /**\r\n     *  An optional url than the card should point to when\r\n     *  the title is clicked.\r\n     */\r\n    url?:string;\r\n\r\n    /**\r\n     *  Should the card be selectable?\r\n     */\r\n    selectable?:boolean;\r\n\r\n    /**\r\n     *  A callback to be called when the user chooses to chenge\r\n     *  the state of the selection.\r\n     */\r\n    onSelectChange?:(selected:boolean) => void;\r\n\r\n    /**\r\n     *  Should the card be selected?\r\n     */\r\n    selected?:boolean;\r\n\r\n    /**\r\n     *  A url to an image associated with the card.\r\n     */\r\n    image?:string;\r\n\r\n    /**\r\n     *  An array of possible badges for the item.\r\n     */\r\n    badges?:Array<BadgeProps>;\r\n\r\n    /**\r\n     *  The content of the card.\r\n     */\r\n    children:ReactNode;\r\n};\r\n\r\n/**\r\n *  This is a component that holds a card of a thing. This is mainly a layout element with\r\n *  some decorations around it. This component should be used when we deal with a list of\r\n *  items that present complex data structure (like a model or so).\r\n * \r\n *  A card should be provided with a title and a content.\r\n * \r\n *  The card can contain a number of optional features:\r\n *  - image\r\n *  - select mechanism\r\n */\r\nexport default function Card(props:CardProps) {\r\n\r\n    const selectable = props.selectable || false;\r\n\r\n    function onCheckboxChange(event:any) {\r\n        \r\n        const target = event.target as HTMLInputElement;\r\n\r\n        const checked = target.checked === true;\r\n\r\n        if (props.onSelectChange) props.onSelectChange(checked);\r\n\r\n        // @todo do we need a state here?\r\n    };\r\n\r\n    const cardCSS = [ 'card' ];\r\n    if (props.image) cardCSS.push('card-withside');\r\n\r\n    return (\r\n        <div className={cardCSS.join(' ')}>\r\n            {props.image && (<img className=\"card-image\" src={props.image} alt=''/>)}\r\n            <div className=\"card-title\">\r\n                {selectable && (<input type=\"checkbox\" onChange={onCheckboxChange} checked={props.selected || false}/>)}\r\n                {props.url && (<Link to={props.url}>{props.title}</Link> )}\r\n                {!props.url && (<span>{props.title}</span>)}\r\n            </div>\r\n            <div>\r\n                {props.badges && (<Badges badges={props.badges}/>)}\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/Item-noimage.d5a93a57.svg\";","import { Model } from 'cogi-collectibles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectSelected } from '../Slices/selectedModels';\r\nimport useImage from '../Hooks/useImage';\r\nimport Card from '../Components/Card';\r\nimport NoImage from './Item-noimage.svg';\r\n\r\nexport interface ItemProps {\r\n    model:Model\r\n};\r\n\r\n/**\r\n *  This is a component showing a single model in the collection. \r\n */\r\nexport default function Item(props:ItemProps) {\r\n\r\n    const selected = useSelector(selectSelected);\r\n    const dispatch = useDispatch();\r\n\r\n    const { image } = useImage(props.model);\r\n\r\n    function onChange(checked:boolean) {\r\n\r\n        if (checked === true) dispatch({ type: 'selectedModels/add', payload: props.model });\r\n        else dispatch({ type: 'selectedModels/remove', payload: props.model });\r\n    };\r\n\r\n    const badges = [\r\n        { text: props.model.state, color: `var(--model-state-${props.model.state})` }\r\n    ];\r\n\r\n    return (\r\n        <Card \r\n            title={props.model.name}\r\n            url={`/model/${props.model.id}`}\r\n            selectable={true}\r\n            onSelectChange={onChange}\r\n            selected={!!selected.find((m:Model) => m.id === props.model.id)}\r\n            image={image || NoImage}\r\n            badges={badges}\r\n        >\r\n        </Card>\r\n    );\r\n};","import { Model } from 'cogi-collectibles';\r\nimport useCollection from '../Hooks/useCollection';\r\nimport Item from \"./Item\";\r\n\r\nexport default function List() {\r\n\r\n    const { collection } = useCollection();\r\n\r\n    return (\r\n        <div className=\"cards cards-grid\">\r\n            {collection.map((m:Model) => <Item key={m.id} model={m}/>)}\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { listen } from \"../Storage/exchange\";\r\nimport fetchModels from \"../Storage/fetchModels\";\r\n\r\n/**\r\n *  A hook to get all models from collection. It automatically changes\r\n *  state when user adds/removes/modifies models and gives access to\r\n *  the update collection.\r\n */\r\nexport default function useCollection() {\r\n\r\n    const [ collection, setCollection ] = useState<Array<Model>|null>(null);\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (collection === null) fetchModels().then((models:Array<Model>) => { isMounted && setCollection(models.sort((a:Model, b:Model) => a.name.localeCompare(b.name))); });\r\n\r\n        return () => { isMounted = false };\r\n    }, [ collection, setCollection ]);\r\n\r\n    useEffect(() => {\r\n\r\n        const cancelListener = listen('models', () => setCollection(null));\r\n\r\n        return () => cancelListener();\r\n    }, [])\r\n\r\n    return {\r\n        collection: collection || []\r\n    };\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function deleteModel(model:string|Model) : Promise<void> {\r\n\r\n    return openObjectStore('models', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.delete(typeof(model) === 'object' ? model.id : model);\r\n\r\n        return wrapIDBRequest(request).then(() => { });\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectSelected } from \"../../Slices/selectedModels\";\r\nimport deleteModel from \"../../Storage/deleteModel\";\r\n\r\n/**\r\n *  This is a component responsible for grouping actions that can\r\n *  be performed on a whole collection of selected models at once.\r\n */\r\nexport default function Actions() {\r\n\r\n    const selected = useSelector(selectSelected);\r\n    const dispatch = useDispatch();\r\n\r\n    function removeModels() {\r\n\r\n        selected.forEach((m:Model) => deleteModel(m));\r\n\r\n        dispatch({ type: \"selectedModels/clear\" });\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow\">\r\n            <button disabled={selected.length === 0} onClick={removeModels}>Remove</button>\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport fetchModels from \"../../Storage/fetchModels\";\r\n\r\n/**\r\n *  A component to manipulate current selection of models.\r\n */\r\nexport default function SelectionControls() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function unselect() {\r\n\r\n        dispatch({ type: \"selectedModels/clear\" });\r\n    };\r\n\r\n    function selectAll() {\r\n\r\n        fetchModels().then((models:Array<Model>) => {\r\n\r\n            dispatch({ type: \"selectedModels/add\", payload: models });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow\">\r\n            <button onClick={unselect}>Unselect</button>\r\n            <button onClick={selectAll}>Select all</button>\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n/**\r\n *  Store a model in the database.\r\n */\r\nexport default function storeModel(model:Model) : Promise<Model> {\r\n\r\n    return openObjectStore('models', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n        \r\n        return wrapIDBRequest(objectStore.put(model)).then(() => model);\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport storeModel from \"./storeModel\";\r\n\r\n/**\r\n *  A helper function to store multiple models at once.\r\n */\r\nexport default function storeModels(models:Array<Model>) : Promise<Array<Model>> {\r\n\r\n    return Promise.all(models.map(storeModel)).then(() => models);\r\n};","import { Model, ModelState } from \"cogi-collectibles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport storeModels from \"../../Storage/storeModels\";\r\nimport { selectSelected } from \"../../Slices/selectedModels\";\r\n\r\n/**\r\n *  A component to change state of models\r\n */\r\nexport default function StateControls() {\r\n\r\n    const selected = useSelector(selectSelected);\r\n\r\n    function updateModels(state:ModelState) {\r\n\r\n        storeModels(selected.map((model:Model) => Object.assign({ }, model, { state })));\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow buttonsrow-narrow\">\r\n            <button className=\"button-unknown\" onClick={() => updateModels(ModelState.Unknown)}>Unknown</button>\r\n            <button className=\"button-packaged\" onClick={() => updateModels(ModelState.Packaged)}>Packaged</button>\r\n            <button className=\"button-assembled\" onClick={() => updateModels(ModelState.Assembled)}>Assembled</button>\r\n            <button className=\"button-primed\" onClick={() => updateModels(ModelState.Primed)}>Primed</button>\r\n            <button className=\"button-painted\" onClick={() => updateModels(ModelState.Painted)}>Painted</button>\r\n            <button className=\"button-done\" onClick={() => updateModels(ModelState.Done)}>Done</button>\r\n            <button className=\"button-broken\" onClick={() => updateModels(ModelState.Broken)}>Broken</button>\r\n        </div>\r\n    );\r\n};","import Actions from \"./Toolbar/Actions\";\r\nimport SelectionControls from \"./Toolbar/SelectionControls\";\r\nimport StateControls from \"./Toolbar/StateControls\";\r\nimport './Toolbar.css';\r\n\r\n/**\r\n *  A component to show toolbar buttons with actions for the whole colection.\r\n */\r\nexport default function Toolbar() {\r\n\r\n    return (\r\n        <div className=\"collection-toolbar\">\r\n            <SelectionControls/>\r\n            <StateControls/>\r\n            <Actions/>\r\n        </div> \r\n    );\r\n};","import List from \"./Collection/List\";\r\nimport Toolbar from \"./Collection/Toolbar\";\r\n\r\n/**\r\n *  A component to show the view to manage the entire collection.\r\n */\r\nexport default function Collection() {\r\n\r\n    return (\r\n        <div className=\"maincontainer\">\r\n            <Toolbar/>\r\n            <List/>\r\n        </div>\r\n    );\r\n};","import { CaseReducer, createSlice, PayloadAction, SliceCaseReducers } from \"@reduxjs/toolkit\";\r\nimport { Model } from \"cogi-collectibles\"\r\nimport { RootState } from \"../Store\";\r\n\r\ntype SliceType = Partial<Model>[];\r\n\r\ntype ClearReducer = CaseReducer<SliceType>;\r\nconst clearReducer:ClearReducer = (state:SliceType) => [];\r\n\r\ntype AddReducer = CaseReducer<SliceType, PayloadAction<Partial<Model>|Array<Partial<Model>>>>;\r\nconst addReducer:AddReducer = (state:SliceType, payload:PayloadAction<Partial<Model>|Partial<Model>[]>) : SliceType => {\r\n\r\n    const input = Array.isArray(payload.payload) ?  payload.payload : [ payload.payload ];\r\n\r\n    return [ ...state, ...input ];\r\n};\r\n\r\ntype InsertReducer = CaseReducer<SliceType, PayloadAction<{ model: Partial<Model>, index: number }>>;\r\nconst insertReducer:InsertReducer = (state:SliceType, action:PayloadAction<{ model: Partial<Model>, index: number }>) : SliceType => {\r\n\r\n    const payload = action.payload;\r\n    const copied = [ ...state ];\r\n\r\n    // this might expand the array and fill it with undefineds. To maintain type\r\n    // safety we fill the missing parts with empty objects that conform with Partial<Model>\r\n    copied[payload.index] = payload.model;\r\n    const final = copied.map((v:Partial<Model>|undefined) => v || { });\r\n\r\n    return final;\r\n};\r\n\r\nconst addModelsSlice = createSlice<SliceType, SliceCaseReducers<SliceType>>({\r\n    name: \"addModels\",\r\n    initialState: [],\r\n    reducers: {\r\n        clear: clearReducer,\r\n        add: addReducer,\r\n        insert: insertReducer\r\n    }\r\n});\r\n\r\nexport const { clear, add, insert } = addModelsSlice.actions;\r\nexport const addModels = (state:RootState) => state.addModels;\r\nexport default addModelsSlice.reducer;","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { Model } from \"cogi-collectibles\";\r\nimport selectedModelsReducer from '../Slices/selectedModels';\r\nimport addModelsReducer from '../AddModels/modelsSlice';\r\n\r\nexport type RootState = {\r\n    selectedModels:Array<Model>,\r\n    addModels:Array<Partial<Model>>\r\n};\r\n\r\nconst store = configureStore<RootState>({\r\n    reducer: combineReducers({\r\n        selectedModels: selectedModelsReducer,\r\n        addModels: addModelsReducer\r\n    })\r\n});\r\n\r\nexport default store;","import { Box, buildBox } from 'cogi-collectibles';\r\n\r\n/**\r\n *  This is a function that fetches the whole catalogue. Inside this function\r\n *  fetches from different sources data, caches them, and merges in one concise\r\n *  output.\r\n * \r\n *  @todo add more catalogue sources and merge them.\r\n *  @todo prolly a better solution is needed.\r\n */\r\nconst fetch : () => Promise<Array<Box>> = (() => {\r\n\r\n    let spaceMarinesPromise = import('cogi-catalogue-gw/space-marines-boxes.json').then((data:any) => { return data.default as Array<Partial<Box>>; }).then((input:Array<Partial<Box>>) => input.map(buildBox));\r\n\r\n    return () => {\r\n        return spaceMarinesPromise;\r\n    };\r\n})();\r\n\r\n/**\r\n *  A function to fetch a catalogue of products.\r\n */\r\nexport default function fetchCatalogue() : Promise<Array<Box>> {\r\n\r\n    return fetch();\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"../Components/Card\";\r\n\r\nexport interface ItemProps {\r\n    box:Box;\r\n};\r\n\r\nexport default function Item(props:ItemProps) {\r\n\r\n    const box = props.box;\r\n\r\n    const badges = [\r\n        { text: box.availability, color: 'black' },\r\n        { text: `${box.models.length} models`, color: 'black' }\r\n    ];\r\n\r\n    return (\r\n        <Card\r\n            title={box.name}\r\n            badges={badges}\r\n        >\r\n            <Link to={`/new-model/box/${props.box.id}`}><button>To collection</button></Link>\r\n        </Card>\r\n    );\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchCatalogue from \"../Storage/fetchCatalogue\";\r\nimport Item from \"./Item\";\r\n\r\n/**\r\n *  A component to show a list of available items in the whole products catalogue.\r\n */\r\nexport default function List() {\r\n\r\n    const [ catalogue, setCatalogue ] = useState<Array<Box>>([]);\r\n\r\n    useEffect(() => {\r\n\r\n        fetchCatalogue().then(setCatalogue);\r\n    }, [ ]);\r\n\r\n    return (\r\n        <div className=\"cards cards-grid\">\r\n            {catalogue.map((b:Box) => (<Item key={b.id} box={b}/> ))}\r\n        </div>\r\n    );\r\n};","import List from \"./Catalogue/List\";\r\n\r\n/**\r\n *  This is a component that can be used to manage a catalogue of possible products:\r\n *  models, boxes, etc. These products aren't yet in the collection and are available\r\n *  for all users for purchuase.\r\n * \r\n *  Note: possibly we need a better way to deal with source of data for this section.\r\n *  Ideally, it would auto-update, not require maintenance, and be always in\r\n *  a valid state. \r\n */\r\nexport default function Catalogue() {\r\n\r\n    return (\r\n        <main className=\"maincontainer\">\r\n            <List/>\r\n        </main>\r\n    );\r\n};","import { Link as RouterLink, LinkProps, useMatch, useResolvedPath } from 'react-router-dom';\r\nimport './Link.css';\r\n\r\nexport default function Link({ children, to, ...props }: LinkProps) {\r\n    \r\n    let resolved = useResolvedPath(to);\r\n    let match = useMatch({ path: resolved.pathname, end: true });\r\n\r\n    const css = [ 'frame-header-link' ];\r\n    if (match) css.push('active');\r\n\r\n    return (\r\n        <RouterLink className={ css.join(' ')} to={to} {...props} >\r\n            {children}\r\n        </RouterLink>\r\n    );\r\n}","import Link from './Header/Link';\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n\r\n    return (\r\n        <header className=\"frame-header maincontainer\">\r\n            <nav>\r\n                <Link to=\"/collection\">Collection</Link>\r\n                <Link to=\"/catalogue\">Catalogue</Link>\r\n            </nav>\r\n            <h1>\r\n                Cogishpere\r\n            </h1>\r\n        </header>\r\n    );\r\n};\r\n","import useStorageManager from \"../Hooks/useStorageManager\";\r\nimport './SnackNotification.css';\r\n/**\r\n *  This is a component that shown notifications in a \"snack\" form.\r\n *  At this time it only shown notification about lack ot persistance\r\n *  permissions.\r\n */\r\nexport default function SnackNotification() {\r\n\r\n    const { persisted } = useStorageManager();\r\n\r\n    return (\r\n        <>\r\n            {!persisted && (<div className=\"frame-snacknotification\">\r\n                The application is not granted persisten storage. All changes will be wiped out when closed.\r\n            </div>)} \r\n        </>\r\n    );\r\n};","import { useEffect, useState } from \"react\";\r\n/**\r\n *  A custom hook to get information if the storage\r\n *  is allowed to be persisted or not.\r\n */\r\nexport default function useStorageManager() {\r\n\r\n    const [ persisted, setPersisted ] = useState<boolean|undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        navigator.storage.persisted().then((result:boolean) => {\r\n\r\n            return result ? Promise.resolve(result) : navigator.storage.persist();\r\n\r\n        }).then((result:boolean) => void isMounted && setPersisted(result));\r\n\r\n        return () => { isMounted = true; };\r\n\r\n    }, [ persisted, setPersisted ]);\r\n\r\n    return {\r\n        persisted: !!persisted\r\n    };\r\n};","import { Outlet } from \"react-router-dom\";\r\nimport Header from \"./Frame/Header\";\r\nimport SnackNotification from \"./Frame/SnackNotification\";\r\n\r\nexport default function Frame() {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Outlet/>\r\n            <SnackNotification/>\r\n        </>\r\n    )\r\n};","import { ReactNode } from \"react\";\r\nimport './Field.css';\r\n\r\nexport interface FieldProps {\r\n\r\n    /**\r\n     *  The label of the field.\r\n     */\r\n    label:string;\r\n\r\n    /**\r\n     *  The actual children. This should be the actual input.\r\n     */\r\n    children:ReactNode;\r\n};\r\n\r\n/**\r\n *  A component for wrapping around an input field inside a form or similar.\r\n */\r\nexport default function Field(props:FieldProps) {\r\n\r\n    return (\r\n        <div className=\"field\">\r\n            <label className=\"field-label\">\r\n                {props.label}\r\n            </label>\r\n            <div className=\"field-content\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport './HeaderInput.css';\r\n\r\nexport interface HeaderInputProps {\r\n    \r\n    // @todo add properties related to header\r\n};\r\n\r\nexport default function HeaderInput(props:HeaderInputProps & React.HTMLProps<HTMLInputElement>) {\r\n\r\n    return (\r\n        <input className=\"headerinput\" {...props}/>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport deleteModel from \"../Storage/deleteModel\";\r\nimport { listen } from \"../Storage/exchange\";\r\nimport fetchModel from \"../Storage/fetchModel\";\r\nimport storeModel from \"../Storage/storeModel\";\r\n\r\n/**\r\n *  A custom hook to load a specific model based on model object or string.\r\n * \r\n *  The hook offers the model as well as functions to update or remove the model.\r\n */\r\nexport default function useModel(initial:Model|string) {\r\n\r\n    const [ model, setModel ] = useState<Model|null|undefined>(typeof(initial) === 'object' ? initial : undefined);\r\n\r\n    const id = typeof(initial) === 'object' ? initial.id : initial;\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (model === undefined) fetchModel(id).then((model:Model) => { isMounted && setModel(model); });\r\n\r\n        return () => { isMounted = false; console.log('unmount model effect', id); }\r\n\r\n    }, [ model, setModel, id ]);\r\n\r\n    useEffect(() => {\r\n\r\n        const cancelListener = listen('models', () => { setModel(undefined); });\r\n\r\n        return () => cancelListener();\r\n    }, []);\r\n\r\n    function remove() { deleteModel(id); }\r\n\r\n    function update(model:Model) {\r\n\r\n        if (model.id !== id) throw Error('unexpected model');\r\n\r\n        storeModel(model);\r\n    }\r\n\r\n    return {\r\n        model: model || null,\r\n        removeModel: remove,\r\n        setModel: update\r\n    };\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function fetchModel(id:string) : Promise<Model> {\r\n\r\n    return openObjectStore('models', 'readonly').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.get(id);\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => request.result);\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport useModel from \"../Hooks/useModel\";\r\n\r\nexport interface ControlsProps {\r\n\r\n    /**\r\n     *  The model that the controls are controlling.\r\n     */\r\n    model:Model;\r\n};\r\n\r\nexport default function Controls(props:ControlsProps) {\r\n\r\n    const { removeModel } = useModel(props.model)\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => removeModel() }>Remove</button>\r\n            <button type=\"submit\">Store</button>\r\n        </div>\r\n    );\r\n};","import { FormEvent, useCallback, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Field from \"./Components/Field\";\r\nimport HeaderInput from \"./Components/HeaderInput\";\r\nimport useModel from \"./Hooks/useModel\";\r\nimport Controls from \"./Model/Controls\";\r\nimport storeImage from \"./Storage/storeImage\";\r\n\r\nexport default function Model() {\r\n\r\n    const params = useParams();\r\n\r\n    const { model, setModel } = useModel(params.model as string);\r\n\r\n    const formRef = useRef<HTMLFormElement|null>(null);\r\n\r\n    const onStore = useCallback((event:FormEvent) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (!formRef.current || !model) return;\r\n\r\n        const formData = new FormData(formRef.current);\r\n\r\n        const newModel = Object.assign({ }, model, { \r\n            name:   formData.get('name'),\r\n            notes:  formData.get('notes')\r\n        });\r\n\r\n        setModel(newModel);\r\n\r\n        const image = formData.get('image') as Blob;\r\n        if (image.size > 0) storeImage(image, model.id);\r\n\r\n    }, [ model, setModel, formRef ]);\r\n\r\n    return (\r\n        <form ref={formRef} className=\"maincontainer\" onSubmit={onStore}>\r\n            {model && (<>\r\n                <Controls model={model}/>\r\n                <Field label=\"Model name\">\r\n                    <HeaderInput name=\"name\" defaultValue={model.name}/>\r\n                </Field> \r\n                <Field label=\"Image\">\r\n                    <input type=\"file\" name=\"image\" accept=\"image/png, image/jpeg\" />\r\n                </Field>\r\n                <Field label=\"Notes\">\r\n                    <textarea name=\"notes\" defaultValue={model.notes}/>\r\n                </Field>\r\n            </>)}\r\n        </form>\r\n    );\r\n};","import wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n/**\r\n *  Store a model in the database.\r\n */\r\nexport default function storeImage(image:Blob, id:string) : Promise<void> {\r\n\r\n    return openObjectStore('images', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n        \r\n        return wrapIDBRequest(objectStore.put(image, id)).then((request:IDBRequest) => console.log(request));\r\n    });\r\n};","import { Model, PossibleModel } from \"cogi-collectibles\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport './ModelDefinition.css';\r\nimport { addModels, insert } from \"./modelsSlice\";\r\n\r\nexport interface ModelDefinitionProps {\r\n\r\n    /**\r\n     *  The model to show to the user and which user will be allowed to adjust.\r\n     */\r\n    model:PossibleModel;\r\n\r\n    /**\r\n     *  The index that this model definition occipies in the overall propopsal.\r\n     */\r\n    index:number;\r\n};\r\n\r\n/**\r\n *  This is a component showing to the user a model from a box. Actually, a possible\r\n *  model from a box. The user can select which model from the box he wants to add\r\n *  to the collection.\r\n */\r\nexport default function ModelDefinition(props:ModelDefinitionProps) {\r\n\r\n    const possibilities = props.model.possibilities;\r\n    const models = useSelector(addModels);\r\n    const dispatch = useDispatch();\r\n\r\n    const setSelected = useCallback((idx:number) => {\r\n\r\n        dispatch(insert({\r\n            index: props.index,\r\n            model: props.model.possibilities[idx]\r\n        }));\r\n\r\n    }, [ dispatch, props ]);\r\n\r\n    // make sure that first element is selected when we first mount\r\n    useEffect(() => void setSelected(0), []);\r\n\r\n    return (\r\n        <div className=\"addmodel-modeldefinition\">\r\n            {possibilities.map((p:Partial<Model>, idx:number) => {\r\n                return (\r\n                    <div key={idx}>\r\n                        <input type=\"radio\" checked={ models[props.index]?.name === p.name } onChange={() => setSelected(idx) }/>\r\n                        <input type=\"text\" defaultValue={p.name}/>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchBox from \"../Storage/fetchBox()\";\r\n\r\n/**\r\n *  A custom hook to load a box.\r\n */\r\nexport default function useBox(id:string) {\r\n\r\n    const [ box, setBox ] = useState<Box|undefined>();\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        fetchBox(id).then((box:Box) => { isMounted && setBox(box); });\r\n\r\n        return () => { isMounted = false; };\r\n\r\n    }, [ box, setBox, id  ]);\r\n\r\n    return {\r\n        box\r\n    };\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport fetchCatalogue from \"./fetchCatalogue\";\r\n\r\n/**\r\n *  A function to fetch a box based on box object based\r\n *  on the id of that box.\r\n */\r\nexport default function fetchBox(id:string) : Promise<Box> {\r\n\r\n    return fetchCatalogue().then((boxes:Array<Box>) => {\r\n\r\n        const box = boxes.find((value:Box) => value.id === id);\r\n\r\n        if (!box) throw Error('Box not found');\r\n\r\n        return box;\r\n    });\r\n};","import { buildModel, PossibleModel } from \"cogi-collectibles\";\r\nimport { FormEvent, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport ModelDefinition from \"./AddModels/ModelDefinition\";\r\nimport { addModels } from \"./AddModels/modelsSlice\";\r\nimport useBox from \"./Hooks/useBox\";\r\nimport storeModels from \"./Storage/storeModels\";\r\n\r\n/**\r\n *  This a component to add new models to the collection.\r\n */\r\nexport default function AddModels() {\r\n\r\n    const params = useParams();\r\n    const { box } = useBox(params.id || '');    // @todo it would be better to have a way to opting out from this call\r\n    const models = useSelector(addModels);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const onSubmit = (e:FormEvent) => {\r\n\r\n        e.preventDefault();\r\n\r\n        storeModels(models.map(buildModel));\r\n\r\n        navigate('/collection');\r\n    };\r\n\r\n    // at first load we want to clear the current store out of any data that could be there.\r\n    useEffect(() => {\r\n\r\n        dispatch({ type: 'addModels/clear' });\r\n\r\n    }, [ dispatch ]);\r\n\r\n    return (\r\n        <div className=\"maincontainer\">\r\n            <h1>\r\n                Add models\r\n            </h1>\r\n            <form onSubmit={onSubmit}>\r\n\r\n                {box && box.models.map((p:PossibleModel, idx:number) => (<ModelDefinition key={idx} model={p} index={idx}/>))}\r\n                <button>Add</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import './Styles.css';\r\nimport './App.css';\r\nimport Collection from './Collection';\r\nimport { Provider as ReduxProvider } from 'react-redux'; \r\nimport store from './Store';\r\nimport Catalogue from './Catalogue';\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\r\nimport Frame from './Frame';\r\nimport Model from './Model';\r\nimport AddModels from './AddModels';\r\n\r\nfunction App() {\r\n  return (\r\n      <ReduxProvider store={store}>\r\n        <BrowserRouter>\r\n          <Routes>\r\n            <Route path=\"/*\" element={<Frame/>}>\r\n              <Route path=\"catalogue\" element={<Catalogue/>}/>\r\n              <Route path=\"collection\" element={<Collection/>}/>              \r\n              <Route path=\"model/:model\" element={<Model/>}/>\r\n              <Route path=\"new-model/:type/:id\" element={<AddModels/>}/>\r\n            </Route>\r\n          </Routes>\r\n        </BrowserRouter>\r\n      </ReduxProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}