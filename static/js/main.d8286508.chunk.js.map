{"version":3,"sources":["../node_modules/cogi-catalogue-gw lazy /^/.*$/ groupOptions: {} namespace object","Storage/exchange.ts","Utils/wrapIDBRequest.ts","Storage/openDatabase.ts","Storage/openObjectStore.ts","Storage/fetchModels.ts","Slices/selectedModels.ts","Hooks/useImage.tsx","Storage/fetchImage.ts","Components/Badge.tsx","Components/Badges.tsx","Components/Card.tsx","Collection/Item-noimage.svg","Collection/Item.tsx","Collection/List.tsx","Hooks/useCollection.tsx","Storage/deleteModel.ts","Collection/Toolbar/Actions.tsx","Collection/Toolbar/SelectionControls.tsx","Storage/storeModel.ts","Storage/storeModels.ts","Collection/Toolbar/StateControls.tsx","Collection/Toolbar.tsx","Collection.tsx","AddModels/modelsSlice.ts","Catalogue/querySlice.ts","Store/index.ts","Storage/fetchCatalogue.ts","Catalogue/Item.tsx","Catalogue/List.tsx","Hooks/useCatalogue.tsx","Catalogue/Toolbar/Query.tsx","Catalogue/Toolbar.tsx","Catalogue.tsx","Frame/Header/Link.tsx","Frame/Header.tsx","Frame/SnackNotification.tsx","Hooks/useStorageManager.tsx","Frame.tsx","Components/Field.tsx","Components/HeaderInput.tsx","Hooks/useModel.tsx","Storage/fetchModel.ts","Model/Controls.tsx","Model.tsx","Storage/storeImage.ts","AddModels/ModelDefinition.tsx","Hooks/useBox.tsx","Storage/fetchBox().ts","AddModels.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","listeners","Map","listen","objectStore","callback","storeListeners","get","Set","add","set","delete","wrapIDBRequest","request","reject","addEventListener","setupModels","database","models","createObjectStore","keyPath","createIndex","unique","transaction","oncomplete","onerror","setupImages","images","openObjectStore","name","mode","indexedDB","open","onsuccess","event","target","result","onupgradeneeded","console","log","objectStoreNames","stores","contains","emit","fetchModels","getAll","selectedModelsSlice","createSlice","initialState","reducers","clear","state","payload","filtered","Array","isArray","filter","m","findIndex","n","remove","value","actions","selectSelected","selectedModels","useImage","source","useState","undefined","image","setImage","useEffect","isMounted","window","URL","createObjectURL","fetchImage","url","Badge","props","className","style","backgroundColor","color","text","Badges","badges","badgeProps","idx","Card","selectable","cardCSS","push","join","src","alt","type","onChange","checked","onSelectChange","selected","to","title","children","Item","useSelector","dispatch","useDispatch","model","find","NoImage","List","collection","setCollection","sort","a","b","localeCompare","cancelListener","useCollection","deleteModel","Actions","disabled","length","onClick","forEach","SelectionControls","storeModel","put","storeModels","all","StateControls","updateModels","assign","ModelState","Unknown","Packaged","Assembled","Primed","Painted","Done","Broken","Toolbar","Collection","addModelsSlice","input","insert","action","copied","index","v","addModels","querySlice","query","catalogueQuery","store","configureStore","reducer","combineReducers","selectedModelsReducer","addModelsReducer","catalogueQueryReducer","fetch","cataloguePromise","data","dataFiles","default","datafiles","separated","file","buildBox","inputs","concat","fetchCatalogue","box","availability","tags","tag","keyword","catalogue","setCatalogue","matchBox","useCatalogue","defaultValue","placeholder","Query","Catalogue","Link","resolved","useResolvedPath","css","useMatch","path","pathname","end","Header","SnackNotification","persisted","setPersisted","navigator","storage","persist","useStorageManager","Frame","Field","label","HeaderInput","useModel","initial","setModel","fetchModel","removeModel","Controls","Model","useParams","formRef","useRef","onStore","useCallback","preventDefault","current","formData","FormData","newModel","notes","size","storeImage","ref","onSubmit","accept","ModelDefinition","possibilities","setSelected","p","useBox","setBox","boxes","fetchBox","AddModels","navigate","useNavigate","buildModel","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8286508.chunk.js","sourcesContent":["var map = {\n\t\"./README.md\": [\n\t\t67,\n\t\t9,\n\t\t8\n\t],\n\t\"./black-templars-boxes\": [\n\t\t31,\n\t\t3,\n\t\t1\n\t],\n\t\"./black-templars-boxes.json\": [\n\t\t31,\n\t\t3,\n\t\t1\n\t],\n\t\"./package\": [\n\t\t30,\n\t\t3,\n\t\t0\n\t],\n\t\"./package.json\": [\n\t\t30,\n\t\t3,\n\t\t0\n\t],\n\t\"./space-marines-boxes\": [\n\t\t32,\n\t\t3,\n\t\t2\n\t],\n\t\"./space-marines-boxes.json\": [\n\t\t32,\n\t\t3,\n\t\t2\n\t],\n\t\"./ultramarines-boxes\": [\n\t\t33,\n\t\t3,\n\t\t3\n\t],\n\t\"./ultramarines-boxes.json\": [\n\t\t33,\n\t\t3,\n\t\t3\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 59;\nmodule.exports = webpackAsyncContext;","/**\r\n *  This file provides an exchange that our database actions can use\r\n *  to notify about changes to the database. This notification can\r\n *  be listen to with listen() function and functions that are\r\n *  aware about the changes can use emit() function to post\r\n *  information which object store changed.\r\n * \r\n *  @todo would be nice to know more specifics about the change\r\n *  @todo use BroadcastChannel for cross-tab changes and\r\n *  cross-worker changes.\r\n */\r\n\r\nconst listeners:Map<string, Set<() => void>> = new Map();\r\n\r\n/**\r\n *  Listen to changes of a specific object store.\r\n */\r\nexport function listen(objectStore:string, callback:() => void) : () => void {\r\n\r\n    const storeListeners = listeners.get(objectStore) || new Set();\r\n    storeListeners.add(callback);\r\n\r\n    listeners.set(objectStore, storeListeners);\r\n\r\n    return () => void storeListeners.delete(callback);\r\n};\r\n\r\n/**\r\n *  Tell that a specific object store changed.\r\n */\r\nexport function emit(objectStore:string) : void {\r\n\r\n    const storeListeners = listeners.get(objectStore);\r\n\r\n    if (!storeListeners) return;\r\n\r\n    for (let callback of storeListeners) callback();\r\n};","/**\r\n *  An utility to wrap an IndexedDB request in a promise\r\n *  which is easier to work with.\r\n */\r\nexport default function wrapIDBRequest(request:IDBRequest) : Promise<IDBRequest> {\r\n\r\n    return new Promise((resolve:(request:IDBRequest) => void, reject: () => void) => {\r\n\r\n        request.addEventListener('success', () => void resolve(request));\r\n        request.addEventListener('error', () => void reject());\r\n    });\r\n};","/**\r\n *  A utility function to open a database and expose that object. This function\r\n *  also automatically sets up the database and makes sure that everything is in\r\n *  working order.\r\n */\r\nexport default function openDatabase() : Promise<IDBDatabase> {\r\n\r\n    return new Promise((resolve:(database:IDBDatabase) => void, reject:() => void) => {\r\n\r\n        const request = indexedDB.open('collection', 2);\r\n        \r\n        request.onsuccess = function(event:any) { resolve(event.target.result); }\r\n        request.onerror = function() { reject(); }\r\n\r\n        request.onupgradeneeded = function(event:any) {\r\n\r\n            console.log('onupgrade');\r\n\r\n            const database = event.target.result as IDBDatabase;\r\n\r\n            if (!('models' in database.objectStoreNames)) setupModels(database);\r\n            if (!('images' in database.objectStoreNames)) setupImages(database);\r\n            \r\n            const stores = database.objectStoreNames;\r\n\r\n            if (!stores.contains('models')) setupModels(database);\r\n            if (!stores.contains('images')) setupImages(database);\r\n        };\r\n    });\r\n};\r\n\r\n/**\r\n *  A helper function to setup the models collection.\r\n */\r\nfunction setupModels(database:IDBDatabase) : Promise<void> {\r\n\r\n    return new Promise((resolve:() => void, reject:() => void) => {\r\n        \r\n        const models = database.createObjectStore('models', { keyPath: 'id' });\r\n\r\n        models.createIndex('id', 'id', { unique: true });\r\n\r\n        models.transaction.oncomplete = () => resolve();\r\n        models.transaction.onerror = () => reject();\r\n    });\r\n};\r\n\r\nfunction setupImages(database:IDBDatabase) : Promise<void> {\r\n\r\n    return new Promise((resolve:() => void, reject:() => void) => {\r\n\r\n        const images = database.createObjectStore('images');\r\n\r\n        images.createIndex('id', 'id', { unique: true });\r\n\r\n        images.transaction.oncomplete = resolve;\r\n        images.transaction.onerror = reject;\r\n    });\r\n};\r\n","import openDatabase from \"./openDatabase\";\r\nimport { emit } from './exchange';\r\n\r\n/**\r\n *  This is a function to open a specific object store inside our IndexedDB.\r\n */\r\nexport default function openObjectStore(name:string, mode:'readwrite'|'readonly') : Promise<IDBObjectStore> {\r\n\r\n    return openDatabase().then((database:IDBDatabase) => {\r\n\r\n        const transaction = database.transaction([ name ], mode);\r\n        const objectStore = transaction.objectStore(name);\r\n\r\n        if (mode === 'readonly') return objectStore;\r\n\r\n        /**\r\n         *  @note This is a very naive implementation of listeninig\r\n         *  to when a transaction that COULD change somethng finishes.\r\n         *  Instead we should check somehow if the transaction changed\r\n         *  something in the object store.\r\n         */\r\n        transaction.addEventListener('complete', () => void emit(name));\r\n\r\n        return objectStore;\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n\r\nexport default function fetchModels() : Promise<Array<Model>> {\r\n\r\n    return openObjectStore('models', 'readonly').then((objectStore:IDBObjectStore) => { \r\n\r\n        const request = objectStore.getAll();\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => request.result);\r\n    });\r\n};","import { createSlice, CaseReducer, PayloadAction, SliceCaseReducers } from '@reduxjs/toolkit';\r\nimport { Model } from 'cogi-collectibles';\r\nimport { RootState } from '../Store';\r\n\r\ntype ClearReducer = CaseReducer<Array<Model>>;\r\nconst clearReducer:ClearReducer = (state:Array<Model>) => [];\r\n\r\ntype AddReducer = CaseReducer<Array<Model>, PayloadAction<Model|Array<Model>>>;\r\nconst addReducer:AddReducer = (state:Array<Model>, payload:PayloadAction<Model|Array<Model>>) : Array<Model> => {\r\n\r\n    const input = Array.isArray(payload.payload) ?  payload.payload : [ payload.payload ];\r\n\r\n    const filtered = input.filter((m:Model) => state.findIndex((n:Model) => m.id === n.id) === -1);\r\n\r\n    return [ ...state, ...filtered ];\r\n};\r\n\r\ntype RemoveReducer = CaseReducer<Array<Model>, PayloadAction<Model>>;\r\nconst removeReducer:RemoveReducer = (state:Array<Model>, payload:PayloadAction<Model>) => {\r\n\r\n    return state.filter((value:Model) => value.id !== payload.payload.id);\r\n};\r\n\r\nconst selectedModelsSlice = createSlice<Model[], SliceCaseReducers<Model[]>>({\r\n    name: 'selectedModels',\r\n    initialState: [],\r\n    reducers: {\r\n        clear: clearReducer,\r\n        add: addReducer,\r\n        remove: removeReducer\r\n    }\r\n});\r\n\r\nexport const { clear, add, remove } = selectedModelsSlice.actions;\r\nexport const selectSelected = (state:RootState) => state.selectedModels;\r\nexport default selectedModelsSlice.reducer;","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchImage from \"../Storage/fetchImage\";\r\n\r\n/**\r\n *  A custom hook to load a specific image.\r\n */\r\nexport default function useImage(source:Model) {\r\n\r\n    const [ image, setImage ] = useState<string|null|undefined>(undefined);\r\n\r\n    const id = source.id;\r\n    \r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (image === undefined) fetchImage(id).then((url:string|null) => { isMounted && setImage(url); });\r\n\r\n        return () => { isMounted = false; }\r\n\r\n    }, [ image, setImage, id ]);\r\n\r\n    return {\r\n        image\r\n    };\r\n};","import wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function fetchImage(id:string) : Promise<string|null> {\r\n\r\n    return openObjectStore('images', 'readonly').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.get(id);\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => {\r\n\r\n            if (!request.result) return null;\r\n\r\n            const url = window.URL.createObjectURL(request.result);\r\n\r\n            return url;\r\n        });\r\n    });\r\n};","import './Badge.css';\r\nexport interface BadgeProps {\r\n\r\n    /**\r\n     *  The actual text in the badge.\r\n     */\r\n    text:string;\r\n\r\n    /**\r\n     *  The color of the badge.\r\n     */\r\n    color:string;\r\n};\r\n/**\r\n *  A badge component.\r\n */\r\nexport default function Badge(props:BadgeProps) {\r\n\r\n    return (\r\n        <span className=\"badge\" style={{ backgroundColor: props.color }}>{props.text}</span>\r\n    );\r\n};","import Badge, { BadgeProps } from \"./Badge\";\r\nimport './Badges.css';\r\nexport interface BadgesProps {\r\n\r\n    /**\r\n     *  The list of badges to display.\r\n     */\r\n    badges:Array<BadgeProps>;\r\n};\r\n\r\n/**\r\n *  A component that helps showing a list of badges.\r\n */\r\nexport default function Badges(props:BadgesProps) {\r\n\r\n    return (\r\n        <div className=\"badges\">\r\n            {props.badges.map((badgeProps:BadgeProps, idx:number) => {\r\n            \r\n                return (<Badge key={idx} {...badgeProps}/>);\r\n            })}\r\n        </div>\r\n    );\r\n};","import { ReactNode } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BadgeProps } from \"./Badge\";\r\nimport Badges from \"./Badges\";\r\nimport './Card.css';\r\n\r\nexport interface CardProps {\r\n\r\n    /**\r\n     *  The title of the card.\r\n     */\r\n    title:string;\r\n\r\n    /**\r\n     *  An optional url than the card should point to when\r\n     *  the title is clicked.\r\n     */\r\n    url?:string;\r\n\r\n    /**\r\n     *  Should the card be selectable?\r\n     */\r\n    selectable?:boolean;\r\n\r\n    /**\r\n     *  A callback to be called when the user chooses to chenge\r\n     *  the state of the selection.\r\n     */\r\n    onSelectChange?:(selected:boolean) => void;\r\n\r\n    /**\r\n     *  Should the card be selected?\r\n     */\r\n    selected?:boolean;\r\n\r\n    /**\r\n     *  A url to an image associated with the card.\r\n     */\r\n    image?:string;\r\n\r\n    /**\r\n     *  An array of possible badges for the item.\r\n     */\r\n    badges?:Array<BadgeProps>;\r\n\r\n    /**\r\n     *  The content of the card.\r\n     */\r\n    children:ReactNode;\r\n};\r\n\r\n/**\r\n *  This is a component that holds a card of a thing. This is mainly a layout element with\r\n *  some decorations around it. This component should be used when we deal with a list of\r\n *  items that present complex data structure (like a model or so).\r\n * \r\n *  A card should be provided with a title and a content.\r\n * \r\n *  The card can contain a number of optional features:\r\n *  - image\r\n *  - select mechanism\r\n */\r\nexport default function Card(props:CardProps) {\r\n\r\n    const selectable = props.selectable || false;\r\n\r\n    function onCheckboxChange(event:any) {\r\n        \r\n        const target = event.target as HTMLInputElement;\r\n\r\n        const checked = target.checked === true;\r\n\r\n        if (props.onSelectChange) props.onSelectChange(checked);\r\n\r\n        // @todo do we need a state here?\r\n    };\r\n\r\n    const cardCSS = [ 'card' ];\r\n    if (props.image) cardCSS.push('card-withside');\r\n\r\n    return (\r\n        <div className={cardCSS.join(' ')}>\r\n            {props.image && (<img className=\"card-image\" src={props.image} alt=''/>)}\r\n            <div className=\"card-title\">\r\n                {selectable && (<input type=\"checkbox\" onChange={onCheckboxChange} checked={props.selected || false}/>)}\r\n                {props.url && (<Link to={props.url}>{props.title}</Link> )}\r\n                {!props.url && (<span>{props.title}</span>)}\r\n            </div>\r\n            <div>\r\n                {props.badges && (<Badges badges={props.badges}/>)}\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","export default __webpack_public_path__ + \"static/media/Item-noimage.d5a93a57.svg\";","import { Model } from 'cogi-collectibles';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectSelected } from '../Slices/selectedModels';\r\nimport useImage from '../Hooks/useImage';\r\nimport Card from '../Components/Card';\r\nimport NoImage from './Item-noimage.svg';\r\n\r\nexport interface ItemProps {\r\n    model:Model\r\n};\r\n\r\n/**\r\n *  This is a component showing a single model in the collection. \r\n */\r\nexport default function Item(props:ItemProps) {\r\n\r\n    const selected = useSelector(selectSelected);\r\n    const dispatch = useDispatch();\r\n\r\n    const { image } = useImage(props.model);\r\n\r\n    function onChange(checked:boolean) {\r\n\r\n        if (checked === true) dispatch({ type: 'selectedModels/add', payload: props.model });\r\n        else dispatch({ type: 'selectedModels/remove', payload: props.model });\r\n    };\r\n\r\n    const badges = [\r\n        { text: props.model.state, color: `var(--model-state-${props.model.state})` }\r\n    ];\r\n\r\n    return (\r\n        <Card \r\n            title={props.model.name}\r\n            url={`/model/${props.model.id}`}\r\n            selectable={true}\r\n            onSelectChange={onChange}\r\n            selected={!!selected.find((m:Model) => m.id === props.model.id)}\r\n            image={image || NoImage}\r\n            badges={badges}\r\n        >\r\n        </Card>\r\n    );\r\n};","import { Model } from 'cogi-collectibles';\r\nimport useCollection from '../Hooks/useCollection';\r\nimport Item from \"./Item\";\r\n\r\nexport default function List() {\r\n\r\n    const { collection } = useCollection();\r\n\r\n    return (\r\n        <div className=\"cards cards-grid\">\r\n            {collection.map((m:Model) => <Item key={m.id} model={m}/>)}\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { listen } from \"../Storage/exchange\";\r\nimport fetchModels from \"../Storage/fetchModels\";\r\n\r\n/**\r\n *  A hook to get all models from collection. It automatically changes\r\n *  state when user adds/removes/modifies models and gives access to\r\n *  the update collection.\r\n */\r\nexport default function useCollection() {\r\n\r\n    const [ collection, setCollection ] = useState<Array<Model>|undefined>();\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (collection === undefined) fetchModels().then((models:Array<Model>) => { isMounted && setCollection(models.sort((a:Model, b:Model) => a.name.localeCompare(b.name))); });\r\n\r\n        return () => { isMounted = false };\r\n    }, [ collection, setCollection ]);\r\n\r\n    useEffect(() => {\r\n\r\n        const cancelListener = listen('models', () => setCollection(undefined));\r\n\r\n        return () => cancelListener();\r\n    }, [])\r\n\r\n    return {\r\n        collection: collection || []\r\n    };\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function deleteModel(model:string|Model) : Promise<void> {\r\n\r\n    return openObjectStore('models', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.delete(typeof(model) === 'object' ? model.id : model);\r\n\r\n        return wrapIDBRequest(request).then(() => { });\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectSelected } from \"../../Slices/selectedModels\";\r\nimport deleteModel from \"../../Storage/deleteModel\";\r\n\r\n/**\r\n *  This is a component responsible for grouping actions that can\r\n *  be performed on a whole collection of selected models at once.\r\n */\r\nexport default function Actions() {\r\n\r\n    const selected = useSelector(selectSelected);\r\n    const dispatch = useDispatch();\r\n\r\n    function removeModels() {\r\n\r\n        selected.forEach((m:Model) => deleteModel(m));\r\n\r\n        dispatch({ type: \"selectedModels/clear\" });\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow\">\r\n            <button disabled={selected.length === 0} onClick={removeModels}>Remove</button>\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport fetchModels from \"../../Storage/fetchModels\";\r\n\r\n/**\r\n *  A component to manipulate current selection of models.\r\n */\r\nexport default function SelectionControls() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    function unselect() {\r\n\r\n        dispatch({ type: \"selectedModels/clear\" });\r\n    };\r\n\r\n    function selectAll() {\r\n\r\n        fetchModels().then((models:Array<Model>) => {\r\n\r\n            dispatch({ type: \"selectedModels/add\", payload: models });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow\">\r\n            <button onClick={unselect}>Unselect</button>\r\n            <button onClick={selectAll}>Select all</button>\r\n        </div>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n/**\r\n *  Store a model in the database.\r\n */\r\nexport default function storeModel(model:Model) : Promise<Model> {\r\n\r\n    return openObjectStore('models', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n        \r\n        return wrapIDBRequest(objectStore.put(model)).then(() => model);\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport storeModel from \"./storeModel\";\r\n\r\n/**\r\n *  A helper function to store multiple models at once.\r\n */\r\nexport default function storeModels(models:Array<Model>) : Promise<Array<Model>> {\r\n\r\n    return Promise.all(models.map(storeModel)).then(() => models);\r\n};","import { Model, ModelState } from \"cogi-collectibles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport storeModels from \"../../Storage/storeModels\";\r\nimport { selectSelected } from \"../../Slices/selectedModels\";\r\n\r\n/**\r\n *  A component to change state of models\r\n */\r\nexport default function StateControls() {\r\n\r\n    const selected = useSelector(selectSelected);\r\n\r\n    function updateModels(state:ModelState) {\r\n\r\n        storeModels(selected.map((model:Model) => Object.assign({ }, model, { state })));\r\n    };\r\n\r\n    return (\r\n        <div className=\"buttonsrow buttonsrow-narrow\">\r\n            <button className=\"button-unknown\" onClick={() => updateModels(ModelState.Unknown)}>Unknown</button>\r\n            <button className=\"button-packaged\" onClick={() => updateModels(ModelState.Packaged)}>Packaged</button>\r\n            <button className=\"button-assembled\" onClick={() => updateModels(ModelState.Assembled)}>Assembled</button>\r\n            <button className=\"button-primed\" onClick={() => updateModels(ModelState.Primed)}>Primed</button>\r\n            <button className=\"button-painted\" onClick={() => updateModels(ModelState.Painted)}>Painted</button>\r\n            <button className=\"button-done\" onClick={() => updateModels(ModelState.Done)}>Done</button>\r\n            <button className=\"button-broken\" onClick={() => updateModels(ModelState.Broken)}>Broken</button>\r\n        </div>\r\n    );\r\n};","import Actions from \"./Toolbar/Actions\";\r\nimport SelectionControls from \"./Toolbar/SelectionControls\";\r\nimport StateControls from \"./Toolbar/StateControls\";\r\nimport './Toolbar.css';\r\n\r\n/**\r\n *  A component to show toolbar buttons with actions for the whole colection.\r\n */\r\nexport default function Toolbar() {\r\n\r\n    return (\r\n        <div className=\"collection-toolbar\">\r\n            <SelectionControls/>\r\n            <StateControls/>\r\n            <Actions/>\r\n        </div> \r\n    );\r\n};","import List from \"./Collection/List\";\r\nimport Toolbar from \"./Collection/Toolbar\";\r\n\r\n/**\r\n *  A component to show the view to manage the entire collection.\r\n */\r\nexport default function Collection() {\r\n\r\n    return (\r\n        <div className=\"maincontainer\">\r\n            <Toolbar/>\r\n            <List/>\r\n        </div>\r\n    );\r\n};","import { CaseReducer, createSlice, PayloadAction, SliceCaseReducers } from \"@reduxjs/toolkit\";\r\nimport { Model } from \"cogi-collectibles\"\r\nimport { RootState } from \"../Store\";\r\n\r\ntype SliceType = Partial<Model>[];\r\n\r\ntype ClearReducer = CaseReducer<SliceType>;\r\nconst clearReducer:ClearReducer = (state:SliceType) => [];\r\n\r\ntype AddReducer = CaseReducer<SliceType, PayloadAction<Partial<Model>|Array<Partial<Model>>>>;\r\nconst addReducer:AddReducer = (state:SliceType, payload:PayloadAction<Partial<Model>|Partial<Model>[]>) : SliceType => {\r\n\r\n    const input = Array.isArray(payload.payload) ?  payload.payload : [ payload.payload ];\r\n\r\n    return [ ...state, ...input ];\r\n};\r\n\r\ntype InsertReducer = CaseReducer<SliceType, PayloadAction<{ model: Partial<Model>, index: number }>>;\r\nconst insertReducer:InsertReducer = (state:SliceType, action:PayloadAction<{ model: Partial<Model>, index: number }>) : SliceType => {\r\n\r\n    const payload = action.payload;\r\n    const copied = [ ...state ];\r\n\r\n    // this might expand the array and fill it with undefineds. To maintain type\r\n    // safety we fill the missing parts with empty objects that conform with Partial<Model>\r\n    copied[payload.index] = payload.model;\r\n    const final = copied.map((v:Partial<Model>|undefined) => v || { });\r\n\r\n    return final;\r\n};\r\n\r\nconst addModelsSlice = createSlice<SliceType, SliceCaseReducers<SliceType>>({\r\n    name: \"addModels\",\r\n    initialState: [],\r\n    reducers: {\r\n        clear: clearReducer,\r\n        add: addReducer,\r\n        insert: insertReducer\r\n    }\r\n});\r\n\r\nexport const { clear, add, insert } = addModelsSlice.actions;\r\nexport const addModels = (state:RootState) => state.addModels;\r\nexport default addModelsSlice.reducer;","import { CaseReducer, createSlice, PayloadAction, SliceCaseReducers } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../Store\";\r\n\r\n\r\nexport interface Query {\r\n    keyword?:string;\r\n};\r\n\r\ntype SliceType = Query;\r\n\r\ntype SetReducer = CaseReducer<SliceType, PayloadAction<SliceType>>;\r\nconst setReducer:SetReducer = (state:SliceType, action:PayloadAction<SliceType>) => {\r\n\r\n    return action.payload;\r\n};\r\n\r\nconst querySlice = createSlice<SliceType, SliceCaseReducers<SliceType>>({\r\n    name: 'catalogueQuery',\r\n    initialState: { },\r\n    reducers: {\r\n        set: setReducer    \r\n    }\r\n});\r\n\r\nexport const { set } = querySlice.actions;\r\nexport const query = (state:RootState) => state.catalogueQuery;\r\nexport default querySlice.reducer;","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { Model } from \"cogi-collectibles\";\r\nimport selectedModelsReducer from '../Slices/selectedModels';\r\nimport addModelsReducer from '../AddModels/modelsSlice';\r\nimport catalogueQueryReducer, { Query } from '../Catalogue/querySlice';\r\n\r\nexport type RootState = {\r\n    selectedModels:Array<Model>,\r\n    addModels:Array<Partial<Model>>,\r\n    catalogueQuery:Query\r\n};\r\n\r\nconst store = configureStore<RootState>({\r\n    reducer: combineReducers({\r\n        selectedModels: selectedModelsReducer,\r\n        addModels: addModelsReducer,\r\n        catalogueQuery: catalogueQueryReducer\r\n    })\r\n});\r\n\r\nexport default store;","import { Box, buildBox } from 'cogi-collectibles';\r\n\r\n/**\r\n *  This is a function that fetches the whole catalogue. Inside this function\r\n *  fetches from different sources data, caches them, and merges in one concise\r\n *  output.\r\n * \r\n *  @todo add more catalogue sources and merge them.\r\n *  @todo prolly a better solution is needed.\r\n */\r\nconst fetch : () => Promise<Array<Box>> = (() => {\r\n\r\n    let cataloguePromise = import('cogi-catalogue-gw/package.json').then((data:any) => {\r\n\r\n        const dataFiles = data.default.datafiles;\r\n\r\n        const separated:Promise<Array<Box[]>> = Promise.all(dataFiles.map((file:string) => {\r\n\r\n            return import(`cogi-catalogue-gw/${file}`).then((data:any) => {\r\n\r\n                console.log(data.default);\r\n\r\n                return data.default as Partial<Box>[];\r\n\r\n            }).then((input:Partial<Box>[]) => input.map(buildBox));\r\n        }));\r\n        \r\n        return separated.then((inputs:Array<Box[]>) => {\r\n\r\n            const result:Box[] = [];\r\n\r\n            return result.concat(...inputs);\r\n        });\r\n\r\n    });\r\n\r\n    return () => {\r\n        return cataloguePromise;\r\n    };\r\n})();\r\n\r\n/**\r\n *  A function to fetch a catalogue of products.\r\n */\r\nexport default function fetchCatalogue() : Promise<Array<Box>> {\r\n\r\n    return fetch();\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BadgeProps } from \"../Components/Badge\";\r\nimport Card from \"../Components/Card\";\r\n\r\nexport interface ItemProps {\r\n\r\n    /**\r\n     *  The object describing a box.\r\n     */\r\n    box:Box;\r\n};\r\n\r\n/**\r\n *  The component showing one item in the catalogue list.\r\n */\r\nexport default function Item(props:ItemProps) {\r\n\r\n    const box = props.box;\r\n\r\n    let badges = [\r\n        { text: box.availability, color: 'var(--badge-black)' },\r\n        { text: `${box.models.length} models`, color: 'var(--badge-black)' }\r\n    ];\r\n\r\n    badges = badges.concat(...props.box.tags.map((tag:string) : BadgeProps => {\r\n\r\n        return { text: tag, color: 'var(--badge-red)' };\r\n    }));\r\n\r\n    return (\r\n        <Card\r\n            title={box.name}\r\n            badges={badges}\r\n        >\r\n            <Link to={`/new-model/box/${props.box.id}`}><button>To collection</button></Link>\r\n        </Card>\r\n    );\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useCatalogue from \"../Hooks/useCatalogue\";\r\nimport Item from \"./Item\";\r\nimport { query as querySlice } from \"./querySlice\";\r\n\r\n/**\r\n *  A component to show a list of available items in the whole products catalogue.\r\n */\r\nexport default function List() {\r\n\r\n    const query = useSelector(querySlice);\r\n\r\n    const { catalogue } = useCatalogue(query.keyword);\r\n\r\n    return (\r\n        <div className=\"cards cards-grid\">\r\n            {catalogue.map((b:Box) => (<Item key={b.id} box={b}/> ))}\r\n        </div>\r\n    );\r\n};","import { Box, matchBox } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchCatalogue from \"../Storage/fetchCatalogue\";\r\n\r\n/**\r\n *  A custom hook to get a catalogue (or its part).\r\n */\r\nexport default function useCatalogue(keyword:string = '') {\r\n\r\n    const [ catalogue, setCatalogue ] = useState<Box[]|undefined>();\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        fetchCatalogue().then((catalogue:Box[]) => {\r\n\r\n            if (!isMounted) return;\r\n\r\n            if (!keyword) return setCatalogue(catalogue);\r\n\r\n            setCatalogue(catalogue.filter((box:Box) => matchBox(keyword, box)));\r\n        });\r\n\r\n        return () => { isMounted = false; }\r\n\r\n    }, [ setCatalogue, keyword ]);\r\n\r\n    return {\r\n        catalogue: catalogue || []\r\n    };\r\n};","import { ChangeEvent } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { set, Query, query as querySlice } from \"../querySlice\";\r\n\r\nexport default function() {\r\n\r\n    const dispatch = useDispatch();\r\n    const query = useSelector(querySlice);\r\n\r\n    function onChange(event:ChangeEvent<HTMLInputElement>) {\r\n\r\n        const target = event.target;\r\n\r\n        const query:Query = { };\r\n\r\n        if (target.value) query.keyword = target.value;\r\n\r\n        dispatch(set(query));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" defaultValue={query.keyword} onChange={onChange} placeholder=\"Search query...\"/>\r\n        </div>\r\n    );\r\n};","import Query from \"./Toolbar/Query\";\r\n\r\n/**\r\n *  The toolbar of the catalogue.\r\n */\r\nexport default function Toolbar() {\r\n    return (\r\n        <div>\r\n            <Query/>\r\n        </div>\r\n    );\r\n};","import List from \"./Catalogue/List\";\r\nimport Toolbar from \"./Catalogue/Toolbar\";\r\n\r\n/**\r\n *  This is a component that can be used to manage a catalogue of possible products:\r\n *  models, boxes, etc. These products aren't yet in the collection and are available\r\n *  for all users for purchuase.\r\n * \r\n *  Note: possibly we need a better way to deal with source of data for this section.\r\n *  Ideally, it would auto-update, not require maintenance, and be always in\r\n *  a valid state. \r\n */\r\nexport default function Catalogue() {\r\n\r\n    return (\r\n        <main className=\"maincontainer\">\r\n            <Toolbar/>\r\n            <List/>\r\n        </main>\r\n    );\r\n};","import { Link as RouterLink, LinkProps, useMatch, useResolvedPath } from 'react-router-dom';\r\nimport './Link.css';\r\n\r\nexport default function Link({ children, to, ...props }: LinkProps) {\r\n    \r\n    let resolved = useResolvedPath(to);\r\n    let match = useMatch({ path: resolved.pathname, end: true });\r\n\r\n    const css = [ 'frame-header-link' ];\r\n    if (match) css.push('active');\r\n\r\n    return (\r\n        <RouterLink className={ css.join(' ')} to={to} {...props} >\r\n            {children}\r\n        </RouterLink>\r\n    );\r\n}","import Link from './Header/Link';\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n\r\n    return (\r\n        <header className=\"frame-header maincontainer\">\r\n            <nav>\r\n                <Link to=\"/collection\">Collection</Link>\r\n                <Link to=\"/catalogue\">Catalogue</Link>\r\n            </nav>\r\n            <h1>\r\n                Cogishpere\r\n            </h1>\r\n        </header>\r\n    );\r\n};\r\n","import useStorageManager from \"../Hooks/useStorageManager\";\r\nimport './SnackNotification.css';\r\n/**\r\n *  This is a component that shown notifications in a \"snack\" form.\r\n *  At this time it only shown notification about lack ot persistance\r\n *  permissions.\r\n */\r\nexport default function SnackNotification() {\r\n\r\n    const { persisted, request } = useStorageManager();\r\n\r\n    return (\r\n        <>\r\n            {!persisted && (<div className=\"frame-snacknotification\">\r\n                The application is not granted persisten storage. All changes will be wiped out when closed.\r\n                <button onClick={request}>Allow persistent storage</button>\r\n            </div>)} \r\n        </>\r\n    );\r\n};","import { useEffect, useState } from \"react\";\r\n/**\r\n *  A custom hook to get information if the storage\r\n *  is allowed to be persisted or not.\r\n */\r\nexport default function useStorageManager() {\r\n\r\n    const [ persisted, setPersisted ] = useState<boolean|undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        navigator.storage.persisted().then((result:boolean) => {\r\n\r\n            return result ? Promise.resolve(result) : navigator.storage.persist();\r\n\r\n        }).then((result:boolean) => void isMounted && setPersisted(result));\r\n\r\n        return () => { isMounted = true; };\r\n\r\n    }, [ persisted, setPersisted ]);\r\n\r\n    const request = () => {\r\n\r\n        navigator.storage.persisted().then((result:boolean) => {\r\n\r\n            return result ? Promise.resolve(result) : navigator.storage.persist();\r\n\r\n        }).then((result:boolean) => setPersisted(result));\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         *  Is the browser using persistent storage?\r\n         */\r\n        persisted: !!persisted,\r\n\r\n        /**\r\n         *  A function to request persistent storage. This should be working when wrapped\r\n         *  in an user action.\r\n         */\r\n        request\r\n    };\r\n};","import { Outlet } from \"react-router-dom\";\r\nimport Header from \"./Frame/Header\";\r\nimport SnackNotification from \"./Frame/SnackNotification\";\r\n\r\nexport default function Frame() {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Outlet/>\r\n            <SnackNotification/>\r\n        </>\r\n    )\r\n};","import { ReactNode } from \"react\";\r\nimport './Field.css';\r\n\r\nexport interface FieldProps {\r\n\r\n    /**\r\n     *  The label of the field.\r\n     */\r\n    label:string;\r\n\r\n    /**\r\n     *  The actual children. This should be the actual input.\r\n     */\r\n    children:ReactNode;\r\n};\r\n\r\n/**\r\n *  A component for wrapping around an input field inside a form or similar.\r\n */\r\nexport default function Field(props:FieldProps) {\r\n\r\n    return (\r\n        <div className=\"field\">\r\n            <label className=\"field-label\">\r\n                {props.label}\r\n            </label>\r\n            <div className=\"field-content\">\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from \"react\";\r\nimport './HeaderInput.css';\r\n\r\nexport interface HeaderInputProps {\r\n    \r\n    // @todo add properties related to header\r\n};\r\n\r\nexport default function HeaderInput(props:HeaderInputProps & React.HTMLProps<HTMLInputElement>) {\r\n\r\n    return (\r\n        <input className=\"headerinput\" {...props}/>\r\n    );\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport deleteModel from \"../Storage/deleteModel\";\r\nimport { listen } from \"../Storage/exchange\";\r\nimport fetchModel from \"../Storage/fetchModel\";\r\nimport storeModel from \"../Storage/storeModel\";\r\n\r\n/**\r\n *  A custom hook to load a specific model based on model object or string.\r\n * \r\n *  The hook offers the model as well as functions to update or remove the model.\r\n */\r\nexport default function useModel(initial:Model|string) {\r\n\r\n    const [ model, setModel ] = useState<Model|null|undefined>(typeof(initial) === 'object' ? initial : undefined);\r\n\r\n    const id = typeof(initial) === 'object' ? initial.id : initial;\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        if (model === undefined) fetchModel(id).then((model:Model) => { isMounted && setModel(model); });\r\n\r\n        return () => { isMounted = false; console.log('unmount model effect', id); }\r\n\r\n    }, [ model, setModel, id ]);\r\n\r\n    useEffect(() => {\r\n\r\n        const cancelListener = listen('models', () => { setModel(undefined); });\r\n\r\n        return () => cancelListener();\r\n    }, []);\r\n\r\n    function remove() { deleteModel(id); }\r\n\r\n    function update(model:Model) {\r\n\r\n        if (model.id !== id) throw Error('unexpected model');\r\n\r\n        storeModel(model);\r\n    }\r\n\r\n    return {\r\n        model: model || null,\r\n        removeModel: remove,\r\n        setModel: update\r\n    };\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\nexport default function fetchModel(id:string) : Promise<Model> {\r\n\r\n    return openObjectStore('models', 'readonly').then((objectStore:IDBObjectStore) => {\r\n\r\n        const request = objectStore.get(id);\r\n\r\n        return wrapIDBRequest(request).then((request:IDBRequest) => request.result);\r\n    });\r\n};","import { Model } from \"cogi-collectibles\";\r\nimport useModel from \"../Hooks/useModel\";\r\n\r\nexport interface ControlsProps {\r\n\r\n    /**\r\n     *  The model that the controls are controlling.\r\n     */\r\n    model:Model;\r\n};\r\n\r\nexport default function Controls(props:ControlsProps) {\r\n\r\n    const { removeModel } = useModel(props.model)\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" onClick={() => removeModel() }>Remove</button>\r\n            <button type=\"submit\">Store</button>\r\n        </div>\r\n    );\r\n};","import { FormEvent, useCallback, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Field from \"./Components/Field\";\r\nimport HeaderInput from \"./Components/HeaderInput\";\r\nimport useModel from \"./Hooks/useModel\";\r\nimport Controls from \"./Model/Controls\";\r\nimport storeImage from \"./Storage/storeImage\";\r\n\r\nexport default function Model() {\r\n\r\n    const params = useParams();\r\n\r\n    const { model, setModel } = useModel(params.model as string);\r\n\r\n    const formRef = useRef<HTMLFormElement|null>(null);\r\n\r\n    const onStore = useCallback((event:FormEvent) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (!formRef.current || !model) return;\r\n\r\n        const formData = new FormData(formRef.current);\r\n\r\n        const newModel = Object.assign({ }, model, { \r\n            name:   formData.get('name'),\r\n            notes:  formData.get('notes')\r\n        });\r\n\r\n        setModel(newModel);\r\n\r\n        const image = formData.get('image') as Blob;\r\n        if (image.size > 0) storeImage(image, model.id);\r\n\r\n    }, [ model, setModel, formRef ]);\r\n\r\n    return (\r\n        <form ref={formRef} className=\"maincontainer\" onSubmit={onStore}>\r\n            {model && (<>\r\n                <Controls model={model}/>\r\n                <Field label=\"Model name\">\r\n                    <HeaderInput name=\"name\" defaultValue={model.name}/>\r\n                </Field> \r\n                <Field label=\"Image\">\r\n                    <input type=\"file\" name=\"image\" accept=\"image/png, image/jpeg\" />\r\n                </Field>\r\n                <Field label=\"Notes\">\r\n                    <textarea name=\"notes\" defaultValue={model.notes}/>\r\n                </Field>\r\n            </>)}\r\n        </form>\r\n    );\r\n};","import wrapIDBRequest from \"../Utils/wrapIDBRequest\";\r\nimport openObjectStore from \"./openObjectStore\";\r\n\r\n/**\r\n *  Store a model in the database.\r\n */\r\nexport default function storeImage(image:Blob, id:string) : Promise<void> {\r\n\r\n    return openObjectStore('images', 'readwrite').then((objectStore:IDBObjectStore) => {\r\n        \r\n        return wrapIDBRequest(objectStore.put(image, id)).then((request:IDBRequest) => console.log(request));\r\n    });\r\n};","import { Model, PossibleModel } from \"cogi-collectibles\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport './ModelDefinition.css';\r\nimport { addModels, insert } from \"./modelsSlice\";\r\n\r\nexport interface ModelDefinitionProps {\r\n\r\n    /**\r\n     *  The model to show to the user and which user will be allowed to adjust.\r\n     */\r\n    model:PossibleModel;\r\n\r\n    /**\r\n     *  The index that this model definition occipies in the overall propopsal.\r\n     */\r\n    index:number;\r\n};\r\n\r\n/**\r\n *  This is a component showing to the user a model from a box. Actually, a possible\r\n *  model from a box. The user can select which model from the box he wants to add\r\n *  to the collection.\r\n */\r\nexport default function ModelDefinition(props:ModelDefinitionProps) {\r\n\r\n    const possibilities = props.model.possibilities;\r\n    const models = useSelector(addModels);\r\n    const dispatch = useDispatch();\r\n\r\n    const setSelected = useCallback((idx:number) => {\r\n\r\n        dispatch(insert({\r\n            index: props.index,\r\n            model: props.model.possibilities[idx]\r\n        }));\r\n\r\n    }, [ dispatch, props ]);\r\n\r\n    // make sure that first element is selected when we first mount\r\n    useEffect(() => void setSelected(0), []);\r\n\r\n    return (\r\n        <div className=\"addmodel-modeldefinition\">\r\n            {possibilities.map((p:Partial<Model>, idx:number) => {\r\n                return (\r\n                    <div key={idx}>\r\n                        <input type=\"radio\" checked={ models[props.index]?.name === p.name } onChange={() => setSelected(idx) }/>\r\n                        <input type=\"text\" defaultValue={p.name}/>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport fetchBox from \"../Storage/fetchBox()\";\r\n\r\n/**\r\n *  A custom hook to load a box.\r\n */\r\nexport default function useBox(id:string) {\r\n\r\n    const [ box, setBox ] = useState<Box|undefined>();\r\n\r\n    useEffect(() => {\r\n\r\n        let isMounted = true;\r\n\r\n        fetchBox(id).then((box:Box) => { isMounted && setBox(box); });\r\n\r\n        return () => { isMounted = false; };\r\n\r\n    }, [ box, setBox, id  ]);\r\n\r\n    return {\r\n        box\r\n    };\r\n};","import { Box } from \"cogi-collectibles\";\r\nimport fetchCatalogue from \"./fetchCatalogue\";\r\n\r\n/**\r\n *  A function to fetch a box based on box object based\r\n *  on the id of that box.\r\n */\r\nexport default function fetchBox(id:string) : Promise<Box> {\r\n\r\n    return fetchCatalogue().then((boxes:Array<Box>) => {\r\n\r\n        const box = boxes.find((value:Box) => value.id === id);\r\n\r\n        if (!box) throw Error('Box not found');\r\n\r\n        return box;\r\n    });\r\n};","import { buildModel, PossibleModel } from \"cogi-collectibles\";\r\nimport { FormEvent, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport ModelDefinition from \"./AddModels/ModelDefinition\";\r\nimport { addModels } from \"./AddModels/modelsSlice\";\r\nimport useBox from \"./Hooks/useBox\";\r\nimport storeModels from \"./Storage/storeModels\";\r\n\r\n/**\r\n *  This a component to add new models to the collection.\r\n */\r\nexport default function AddModels() {\r\n\r\n    const params = useParams();\r\n    const { box } = useBox(params.id || '');    // @todo it would be better to have a way to opting out from this call\r\n    const models = useSelector(addModels);\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const onSubmit = (e:FormEvent) => {\r\n\r\n        e.preventDefault();\r\n\r\n        storeModels(models.map(buildModel));\r\n\r\n        navigate('/collection');\r\n    };\r\n\r\n    // at first load we want to clear the current store out of any data that could be there.\r\n    useEffect(() => {\r\n\r\n        dispatch({ type: 'addModels/clear' });\r\n\r\n    }, [ dispatch ]);\r\n\r\n    return (\r\n        <div className=\"maincontainer\">\r\n            <h1>\r\n                Add models\r\n            </h1>\r\n            <form onSubmit={onSubmit}>\r\n\r\n                {box && box.models.map((p:PossibleModel, idx:number) => (<ModelDefinition key={idx} model={p} index={idx}/>))}\r\n                <button>Add</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import './Styles.css';\r\nimport './App.css';\r\nimport Collection from './Collection';\r\nimport { Provider as ReduxProvider } from 'react-redux'; \r\nimport store from './Store';\r\nimport Catalogue from './Catalogue';\r\nimport { Route, Routes, HashRouter } from 'react-router-dom';\r\nimport Frame from './Frame';\r\nimport Model from './Model';\r\nimport AddModels from './AddModels';\r\n\r\nfunction App() {\r\n  return (\r\n      <ReduxProvider store={store}>\r\n        <HashRouter>\r\n          <Routes>\r\n            <Route path=\"*\" element={<Frame/>}>\r\n              <Route path=\"catalogue\" element={<Catalogue/>}/>\r\n              <Route path=\"collection\" element={<Collection/>}/>              \r\n              <Route path=\"model/:model\" element={<Model/>}/>\r\n              <Route path=\"new-model/:type/:id\" element={<AddModels/>}/>\r\n            </Route>\r\n          </Routes>\r\n        </HashRouter>\r\n      </ReduxProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}